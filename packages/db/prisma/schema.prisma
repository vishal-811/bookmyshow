// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @unique @default(uuid())
  name        String
  phoneNumber Int     @unique
  isverified  Boolean

}

model Creator {
  id          String  @unique @default(uuid())
  name        String
  phoneNumber Int     @unique
  isVerified  Boolean
  Events      Event[]
}

model Event {
  id          String   @unique @default(uuid())
  title       String
  description String
  date        DateTime
  time        DateTime

  creatorId String
  creator   Creator  @relation(fields: [creatorId], references: [id])
  seats Seat[]

  location EventsOnLocations[]
}

model Location {
  id      String @unique @default(uuid())
  country String
  state   String
  city    String
  pincode Int
  address String

  event EventsOnLocations[]
}

model EventsOnLocations {
  locationId String
  locations  Location @relation(fields: [locationId], references: [id])

  eventId String
  events  Event  @relation(fields: [eventId], references: [id])

  @@id([locationId, eventId])
}

model Seat {
  id String @unique @default(uuid())

  qr String
  eventId String
  event Event @relation(fields: [eventId], references: [id])

  seatTypeId String 
  seatType SeatType @relation(fields: [seatTypeId], references: [id])
}

model SeatType {
  id          String @unique @default(uuid())
  name        String
  description String
  price       Int
  Capacity    Int
  filled      Int    @default(0)

  seats Seat[]
}


model payment {
  id String @unique @default(uuid())
}

model Booking {
  id String @unique @default(uuid())
}